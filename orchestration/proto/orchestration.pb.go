// Code generated by protoc-gen-go. DO NOT EDIT.
// source: orchestration.proto

package orchestration

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Result struct {
	Json                 []byte   `protobuf:"bytes,1,opt,name=json,proto3" json:"json,omitempty"`
	Hostname             string   `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_83ae47232504a289, []int{0}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetJson() []byte {
	if m != nil {
		return m.Json
	}
	return nil
}

func (m *Result) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

type Complete struct {
	Done                 bool     `protobuf:"varint,1,opt,name=done,proto3" json:"done,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Complete) Reset()         { *m = Complete{} }
func (m *Complete) String() string { return proto.CompactTextString(m) }
func (*Complete) ProtoMessage()    {}
func (*Complete) Descriptor() ([]byte, []int) {
	return fileDescriptor_83ae47232504a289, []int{1}
}

func (m *Complete) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Complete.Unmarshal(m, b)
}
func (m *Complete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Complete.Marshal(b, m, deterministic)
}
func (m *Complete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Complete.Merge(m, src)
}
func (m *Complete) XXX_Size() int {
	return xxx_messageInfo_Complete.Size(m)
}
func (m *Complete) XXX_DiscardUnknown() {
	xxx_messageInfo_Complete.DiscardUnknown(m)
}

var xxx_messageInfo_Complete proto.InternalMessageInfo

func (m *Complete) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

func init() {
	proto.RegisterType((*Result)(nil), "orchestration.Result")
	proto.RegisterType((*Complete)(nil), "orchestration.Complete")
}

func init() {
	proto.RegisterFile("orchestration.proto", fileDescriptor_83ae47232504a289)
}

var fileDescriptor_83ae47232504a289 = []byte{
	// 163 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xce, 0x2f, 0x4a, 0xce,
	0x48, 0x2d, 0x2e, 0x29, 0x4a, 0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0xe2, 0x45, 0x11, 0x54, 0xb2, 0xe0, 0x62, 0x0b, 0x4a, 0x2d, 0x2e, 0xcd, 0x29, 0x11, 0x12, 0xe2,
	0x62, 0xc9, 0x2a, 0xce, 0xcf, 0x93, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x09, 0x02, 0xb3, 0x85, 0xa4,
	0xb8, 0x38, 0x32, 0xf2, 0x8b, 0x4b, 0xf2, 0x12, 0x73, 0x53, 0x25, 0x98, 0x14, 0x18, 0x35, 0x38,
	0x83, 0xe0, 0x7c, 0x25, 0x39, 0x2e, 0x0e, 0xe7, 0xfc, 0xdc, 0x82, 0x9c, 0xd4, 0x92, 0x54, 0x90,
	0xde, 0x94, 0xfc, 0xbc, 0x54, 0xb0, 0x5e, 0x8e, 0x20, 0x30, 0xdb, 0x28, 0x90, 0x8b, 0xc7, 0x1f,
	0x6e, 0x55, 0x7e, 0x91, 0x90, 0x23, 0x17, 0x77, 0x70, 0x6a, 0x5e, 0x0a, 0xc4, 0xb6, 0x62, 0x21,
	0x51, 0x3d, 0x54, 0xd7, 0x41, 0xc4, 0xa5, 0xc4, 0xd1, 0x84, 0x61, 0x56, 0x28, 0x31, 0x68, 0x30,
	0x26, 0xb1, 0x81, 0xbd, 0x60, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x92, 0xe3, 0x0d, 0x32, 0xd9,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OrchestratorClient is the client API for Orchestrator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrchestratorClient interface {
	// Sends results
	SendResults(ctx context.Context, opts ...grpc.CallOption) (Orchestrator_SendResultsClient, error)
}

type orchestratorClient struct {
	cc grpc.ClientConnInterface
}

func NewOrchestratorClient(cc grpc.ClientConnInterface) OrchestratorClient {
	return &orchestratorClient{cc}
}

func (c *orchestratorClient) SendResults(ctx context.Context, opts ...grpc.CallOption) (Orchestrator_SendResultsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Orchestrator_serviceDesc.Streams[0], "/orchestration.Orchestrator/SendResults", opts...)
	if err != nil {
		return nil, err
	}
	x := &orchestratorSendResultsClient{stream}
	return x, nil
}

type Orchestrator_SendResultsClient interface {
	Send(*Result) error
	CloseAndRecv() (*Complete, error)
	grpc.ClientStream
}

type orchestratorSendResultsClient struct {
	grpc.ClientStream
}

func (x *orchestratorSendResultsClient) Send(m *Result) error {
	return x.ClientStream.SendMsg(m)
}

func (x *orchestratorSendResultsClient) CloseAndRecv() (*Complete, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Complete)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OrchestratorServer is the server API for Orchestrator service.
type OrchestratorServer interface {
	// Sends results
	SendResults(Orchestrator_SendResultsServer) error
}

// UnimplementedOrchestratorServer can be embedded to have forward compatible implementations.
type UnimplementedOrchestratorServer struct {
}

func (*UnimplementedOrchestratorServer) SendResults(srv Orchestrator_SendResultsServer) error {
	return status.Errorf(codes.Unimplemented, "method SendResults not implemented")
}

func RegisterOrchestratorServer(s *grpc.Server, srv OrchestratorServer) {
	s.RegisterService(&_Orchestrator_serviceDesc, srv)
}

func _Orchestrator_SendResults_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OrchestratorServer).SendResults(&orchestratorSendResultsServer{stream})
}

type Orchestrator_SendResultsServer interface {
	SendAndClose(*Complete) error
	Recv() (*Result, error)
	grpc.ServerStream
}

type orchestratorSendResultsServer struct {
	grpc.ServerStream
}

func (x *orchestratorSendResultsServer) SendAndClose(m *Complete) error {
	return x.ServerStream.SendMsg(m)
}

func (x *orchestratorSendResultsServer) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Orchestrator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "orchestration.Orchestrator",
	HandlerType: (*OrchestratorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendResults",
			Handler:       _Orchestrator_SendResults_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "orchestration.proto",
}
